1/26/23
for octal conversion, group by 3 bits,0's are 0's, but 1's should be added up like 2^3 * 1 + 1*2^4

TO RUN IN C
cc filename.c -o filename
./filename

printf("%o\n", 43); //octal conversion in C

1. Convert 43 to unsigned 8-bit binary representation.
00101011

2. Convert the answer to the first part to Octal.
53
3. Convert the answer to the first part to Hexadecimal.
0X2B
4. Convert -43 to two's complement binary representation.
11010100
As for ucu, -ask how to pay secured card 

5. Convert -43 to sign-magnitude representation.

6. Convert the answer to parts four and five to Octal and Hexadecimal

7. Find the 32-bit representation of the following MIPS instructions. Convert the representation to Hexadecimal.

    a) add $t0, $s2, $s6

    b) lw $t3, -12($t1)

    c) addi $s1, $s2, 3
    
 -----------------------------------------------------------------------------
    1/31/23 
    r-format instructions -> 3 registers
    (op, rs,rt,rd,func)
    i-fromat instructions-> 2 registers
    (op, rs & rt, constant or address)

add $s4, $s3, $t7
$s3 is rs and has value of 19 as $s0 starts at 16
same applies to rest of registers^
-----------------------------------------------------------------------------
binary shortcut
1.# u wanna convert subtract it by greatest factor of 2 and then put 1 next to it.
2.repeat until no remainder
ex: 9 in binary
base 2's up to nine
1-->1-1= 0 so its 1
2-->no good so its 0
4--> 1-4 is negative no good so its 0
8 --> put a 1 next to it cuz it works 8-9 now we got a 1 and this row is 1

so now we got 1001 in binary to represent 9
-----------------------------------------------------------------------------

addi $t2, $t5, -12

lw $s1, -10($t1)

sw $s1, -10($t1)













2/7/23
Assuming that i, j and A are stored at registers $s0-$s2 respectively and A is an array of integers, write the MIPS assembly codes for the following statements:

1. i = abs(j);

#if(j>= 0) jump to positive
#i - 0j


2. if(i == j) A[i] = 5; else A[i+1] = 5;

body of else code mips:
bne $s0, $s1, Else

#body of if A[i] = 5
sll $t0, $s0, 2 # $t0 = offset = 4 * i
add $t0, $t0,$s2 # $t0 = base + offset
addi $t1, $zero, 5 # $t1 = 5
sw $t1, 0($t0) $A[i] = 5

sw $t1, 4($t0) $A[i+1] = 5
j Exit


3. for(i = 0; i != 10;i++) A[i] = j+3;
#changing for loop to while loop then to mips

#i = 0;
#while (i != 10){
#A[I] = j + 3;
#i++;
#}

#assigning a value to 0, i to 0...
#initializing 0 and condition is done outside of while loop body

addi $s0, $zero, 0
addi $t0, $zero, 10 #generate 10 in a register
beq $s0, $t0, Exit
#body of while loop
//adds j+3 and stores it in register t1
addi $t1, $s1, 3 # $t1 = j+3
sll $t2, $s0, 2 #$t0 = offset = 4 * i
add $t2, $t2, $s2 #$t2 = base + offset
sw $t1, 0($t2) # A[i] = j + 3
addi $s0, $s0, 1 #i++
j While 
Exit:


4. switch(i){case 1: case 2: j++; break; case 3: A[j]++; default: i++;}

 ^translated to if/else statements
 /*
 if(i==1 || i==2)
 j++;
 else if(i==3)
    A[j]++;
 else 
       i++;
 */

addi $t0, $zero, 1
addi $t1,$zero,2
addi $t2, $zero, 3
beq $s0, $t0, If
bne $s0, $t1, Else1
If: addi $s1, $s1, 1
j Exit
Else1: bne $s0, $t2, Else2

#A[j]++

sll
add
lw
addi
sw
//at the end of else 1 so jump to exit
j Exit

//and then for else 2 just do i++ which is addi with the registers







#to load you need to add 1 read and then store in this case

2/9/23

int leaf_example (int g, int h, int i, int j)
{
int f;
f = (g + h) â€“ (i + j);
return f;
}

in mips :

leaf_example:
add $t0,$a0,$a1 #$t0 = g + h
add $t1, $a2, $a3  #
sub $v0, $t0, $t1  #
jr a2 #jump back to register a2  


